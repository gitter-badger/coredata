@using cloudscribe.Web.Pagination
@using CoreData.ViewModels
@using CoreData.Models

@model ArticleListViewModel
@{
    ViewBag.Title = "Browse all articles with ViewModel";
}
<h2>@ViewBag.Title</h2>
<p>
    This demo uses alphabetic pager/filter in conjunction with a pager.
    If you click a letter that matches the start of a product category it
    will filter to matching items and the pager will preserve that filter while paging.
    The only categories are Food, Electronics, and Shoes, so only F, E, or S will show any products.
    You can also manipulate the pageSize param in the url.
</p>

<div>
    <cs-alphapager cs-alphabet="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                   cs-selected-letter="@Model.Query"
                   cs-all-label="All"
                   asp-controller="Blog"
                   asp-action="ArticleList"
                   cs-selected-letter-param="query"></cs-alphapager>
</div>

<table class="table table-striped table-bordered">
    <thead>
        <tr>
            <th>Product name</th>
            <th>Category</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var articles in Model.Articles)
        {
            <tr>
                <td>@articles.Name</td>
                <td>@articles.Category</td>
            </tr>}
    </tbody>
</table>
<div>
    <cs-pager cs-paging-info="@Model.Paging"
              cs-pagenumber-param="pageNumber"
              asp-controller="Blog"
              asp-action="ArticleList"
              asp-route-query="@Model.Query"
              asp-route-pagesize="@Model.Paging.ItemsPerPage"></cs-pager>
</div>